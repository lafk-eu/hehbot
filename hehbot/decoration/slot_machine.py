from random import randint
from hehbot import repo_user, Person
import aiogram, asyncio
from aiogram.enums import DiceEmoji
from collections import Counter
from io import BytesIO
from PIL import Image, ImageFont, ImageDraw
import numpy as np

slot_machine_path = 'img/slot_machine/'

# bar, grape, lemon, seven
CASINO_EMOJI = ["üÖ±Ô∏è", "üçá", "üçã", "7Ô∏è‚É£"]

async def draw_slot_machine_image_async(user_id: int, reward: int, randomized_reward: int):        
    # –í–∏–∫–æ–Ω—É—î–º–æ –±–ª–æ–∫—É—é—á—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ PIL –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    def create_animated_gif(user_id: int, reward: int):
        if reward < 0:
            reward_str = 'm' + str(abs(reward))
            color = (200, 50, 50)
        else:
            reward_str = str(reward)
            color = (50, 200, 50)

        image_path = f"{slot_machine_path}{reward_str}.jpg"
        base_image = Image.open(image_path).resize((320, 180))
        
        text = str(randomized_reward) if randomized_reward < 0 else '+' + str(randomized_reward)
        font_path = "font/impact.ttf"
        frames, duration = 24, 1000 // 24
        min_font_size, max_font_size = 24, 36
        animated_frames = []
        
        outline_thickness, outline_color = 1, (0, 0, 0)
        
        for i in range(frames):
            font_size = int(min_font_size + (max_font_size - min_font_size) * (0.5 + 0.5 * np.sin(np.pi * 2 * i / frames)))
            frame = base_image.copy()
            draw = ImageDraw.Draw(frame)
            font = ImageFont.truetype(font_path, font_size)
            text_width = draw.textlength(text, font=font)
            text_position = ((frame.width - text_width) // 1.5, (frame.height - font_size) // 2.6)

            for x in range(-outline_thickness, outline_thickness + 1):
                for y in range(-outline_thickness, outline_thickness + 1):
                    draw.text((text_position[0] + x, text_position[1] + y), text, font=font, fill=outline_color)
            
            draw.text(text_position, text, font=font, fill=color)
            animated_frames.append(frame)

        output_path = f"{slot_machine_path}users/{user_id}.gif"
        animated_frames[0].save(output_path, save_all=True, append_images=animated_frames[1:], duration=duration, loop=0, format='GIF')

        return output_path

    return await asyncio.to_thread(create_animated_gif, user_id, reward)
    #except:
        #return None

async def is_jackpot() -> bool:
    return randint(1, 150) == 1

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–≤–æ—Ö –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –µ–º–æ–¥–∑—ñ –≤ —Ä—è–¥—É
def has_two_in_a_row(slots, emojis):
    for emoji in emojis:
        if slots.count(emoji) >= 2 and (slots[0] == slots[1] == emoji or slots[1] == slots[2] == emoji):
            return True
    return False

async def check_reward(reward: int) -> bool:
    if reward == 100 or reward == 500 or reward == 1000 or reward >= 5000:
        return True
    return False

async def send_slot_machine(msg: aiogram.types.Message, slots: list[str]):    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É
    score_change = 0
        
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
    if slots == ["üçã", "üçã", "üçã"] or slots == ["üÖ±Ô∏è", "üÖ±Ô∏è", "üÖ±Ô∏è"]:
        score_change = -5000
        if await is_jackpot():
            score_change = -100000
    elif slots == ["üçá", "üçá", "üçá"] or slots == ["7Ô∏è‚É£", "7Ô∏è‚É£", "7Ô∏è‚É£"]:
        score_change = 5000
        if await is_jackpot():
            score_change = 100000
    elif has_two_in_a_row(slots, ["üçã", "üÖ±Ô∏è"]):
        score_change = -1000
    elif has_two_in_a_row(slots, ["üçá", "7Ô∏è‚É£"]):
        score_change = 1000
    else:
        counts = Counter(slots)
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É–º–æ–≤–∏ –¥–ª—è –¥–≤–æ—Ö –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –µ–º–æ–¥–∑—ñ
        if counts["üçã"] == 2 or counts["üÖ±Ô∏è"] == 2:
            score_change = -500
        elif counts["üçá"] == 2 or counts["7Ô∏è‚É£"] == 2:
            score_change = 500
        else:
            await asyncio.sleep(2)
            # –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π
            if counts["üçã"] > 0 and counts["üÖ±Ô∏è"] > 0:
                score_change = -100
            else:
                score_change = 100

    async def randomize(reward: int):
        if reward == 0:
            return 0
        elif reward >= 100000:
            return 100000
        elif reward <= -100000:
            return -100000
        elif reward > 0:
            # –î–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥, —Ä–∞–Ω–¥–æ–º—ñ–∑—É—î–º–æ –º—ñ–∂ 1 —ñ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –Ω–∞–≥–æ—Ä–æ–¥–∏
            return reward + randint(-int(reward / 2), int(reward / 2))
        else:
            # –î–ª—è –≤—ñ–¥'—î–º–Ω–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥, —Ä–∞–Ω–¥–æ–º—ñ–∑—É—î–º–æ –º—ñ–∂ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –Ω–∞–≥–æ—Ä–æ–¥–∏ —ñ -1
            return reward + randint(int(reward / 2), -int(reward / 2))

    user = repo_user.by_tg(msg.from_user.id)
    randomized_score = await randomize(score_change)

    if score_change == 100000:
        await msg.reply_photo(photo=aiogram.types.FSInputFile(slot_machine_path+'jackpot.jpg'), caption='–¶–µ ‚Äî —Å–∫–∞—Ä–±!')
        
    elif score_change == -100000:
        await msg.reply_photo(photo=aiogram.types.FSInputFile(slot_machine_path+'mjackpot.jpg'), 
                              caption='''
–ü—Ä–∏–Ω–æ—à—É —Å–≤–æ—ó —â–∏—Ä—ñ –≤–∏–±–∞—á–µ–Ω–Ω—è –∑–∞ –Ω–µ–≤–¥–∞—á—É –≤ –≥—Ä—ñ, —â–æ —Å—Ç–∞–ª–∞—Å—è –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ —Ä–∞–Ω–¥–æ–º—ñ–∑–æ–≤–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤. 
–†–æ–∑—É–º—ñ—î–º–æ, —â–æ —Ü–µ –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ä–æ–∑—á–∞—Ä—É–≤–∞–Ω–Ω—è.''')

    elif score_change != 0:
        if score_change >= 250 or score_change <= -250:
            img_path = await draw_slot_machine_image_async(user.id, score_change, randomized_score)
            if img_path:
                await msg.reply_animation(aiogram.types.FSInputFile(img_path), caption= '–ù–æ–≤–∞ —Å–ø—Ä–æ–±–∞ –∑–∞–≤—Ç—Ä–∞.')
                await repo_user.update_person(user.id, score=user.score + randomized_score)
                return None
        await msg.reply(f'–û—Ç—Ä–∏–º–∞–Ω–æ {randomized_score} —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫—Ä–µ–¥–∏—Ç—ñ–≤ –∑–∞ –≤–∞—à—É –≥—Ä—É! –ù–æ–≤–∞ —Å–ø—Ä–æ–±–∞ –∑–∞–≤—Ç—Ä–∞.')
        
    else:
        return '–û—Ç–∞–∫–æ—ó! –û—Ç—Ä–∏–º–∞–Ω–æ 0 –∫—Ä–µ–¥–∏—Ç—ñ–≤! –ù–æ–≤–∞ —Å–ø—Ä–æ–±–∞ –∑–∞–≤—Ç—Ä–∞'
    
    await repo_user.update_person(user.id, score=user.score + randomized_score)
    return None