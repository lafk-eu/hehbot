from hehbot.client import repo_user
from hehbot.admin import repo_staff, StaffPerson

from hehbot.base_command import BotCommand
from datetime import datetime

from hehbot.decoration.credit_image import send_credit_image, send_highscore_image, send_lowscore_image, send_changed_credit_image
from mbot import bot

import aiogram

import re

def find_username(text: str) -> str:
    # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —ñ–º'—è, —è–∫–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "@" –∞–±–æ "$"
    special_match = re.search(r'\b[@$][a-zA-Z_][a-zA-Z0-9_]*\b', text)
    if special_match:
        return special_match.group(0)

    # –Ø–∫—â–æ —Ç–∞–∫–µ —ñ–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ —ñ–º'—è –∑–∞ —ñ—Å–Ω—É—é—á–∏–º –ø–∞—Ç–µ—Ä–Ω–æ–º
    match = re.search(r'\b[a-zA-Z_][a-zA-Z0-9_]*\b', text)
    return match.group(0) if match else None

def find_number(text: str) -> int:
    match = re.search(r'(?<!\w)[+-]?\d+', text)
    return int(match.group(0)) if match else None

def remove_english_words(text: str) -> str:
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤.
    # –°–ª–æ–≤–æ –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è —ñ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –ª—ñ—Ç–µ—Ä–æ—é –∞–±–æ —Å–∏–º–≤–æ–ª–æ–º "_",
    # —ñ –º—ñ—Å—Ç–∏—Ç–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ "_".
    pattern = r'\b[a-zA-Z_]+\b'
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ re.sub() –¥–ª—è –∑–∞–º—ñ–Ω–∏ –≤—Å—ñ—Ö –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –Ω–∞ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫.
    result = re.sub(pattern, '', text)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤.
    return result

class SetCreditCommand(BotCommand):
    description = "+300 —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫—Ä–µ–¥–∏—Ç—ñ–≤"

    @classmethod
    def command_name(cls) -> str:
        return "give"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None) -> str:
        MAX_INT_VALUE = 9223372036854775807
        MIN_INT_VALUE = -9223372036854775808
        
        staff = repo_staff.get_by_id(msg.from_user.id)
        amount = None

        if not staff:
            return cls.execute_stopped(f'—á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤')
        
        if by_str:
            username = find_username(by_str)
            amount = find_number(by_str)
        else:
            return cls.execute_stopped('–Ω–µ –≤–∫–∞–∑–∞–Ω–æ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—É–º—É')

        target = repo_user.by_name(username)
        if not target:
            target_msg = msg.reply_to_message
            if target_msg:
                target = repo_user.by_tg_message(target_msg)
                if not target:
                    return cls.execute_stopped(f'–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è {username} –≤ –º–æ—é –±–∞–∑—É –¥–∞–Ω–∏—Ö')
            else:
                return cls.execute_stopped(f'–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö: –º–æ–∂–µ—à –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ–± –¥–æ–¥–∞—Ç–∏.')

        if amount:
            print('—á–∏—Å–ª–æ: ', amount)
            print('—Ä—è–¥–æ–∫: ', by_str)
            new_score = target.score + amount

            if new_score > MAX_INT_VALUE:
                new_score = MAX_INT_VALUE
            elif new_score < MIN_INT_VALUE:
                new_score = MIN_INT_VALUE
            
        else:
            return cls.execute_stopped(f'—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ –∫—Ä–µ–¥–∏—Ç—ñ–≤')
        
        if not staff.admin:
            if staff.credits <= 0:
                return f'–ù–∞—Å—å–æ–≥–æ–¥–Ω—ñ —Ç–≤–æ—è –æ—Å–æ–±–∏—Å—Ç–∞ —Ä–æ–∑–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–∞ üò¢'
            if staff.credits < amount:
                return f'–°—å–æ–≥–æ–¥–Ω—ñ —Ç–æ–±—ñ –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏ –∫—Ä–µ–¥–∏—Ç—ñ–≤ –Ω–∞: {staff.credits}. –ó–º–µ–Ω—à –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞—á—ñ.'

            staff.credits -= abs(amount)
            repo_staff.update(staff)

            if repo_staff.get_by_id(target.id):
                return f'–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–≤–∞—Ç–∏ —Å–æ—à—ñ–∞–ª –∫—Ä–µ–¥–∏—Ç–∏ —ñ–Ω—à–∏–º —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞–º —Å–æ—à—ñ–∞–ª –∫—Ä–µ–¥–∏—Ç—É! üò°üò°üò°'

        await send_changed_credit_image(repo_user.by_tg(target.id), amount, msg.chat.id)
        await repo_user.update_person(id=target.id, score=new_score)

        return None


class MyCreditCommand(BotCommand):
    description = "–ü–æ–∫–∞–∂–∏/–°–∫—ñ–ª—å–∫–∏ —è–∫–∏–π –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç—ñ–≤"

    @classmethod
    def command_name(cls) -> str:
        return "credit"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Å–ø–æ—á–∞—Ç–∫—É
        if args:
            user = repo_user.by_name(find_username(args[0]))
            if user:
                return await send_credit_image(user, msg.chat.id)
            elif not by_str:  # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —ñ by_str –Ω–µ –Ω–∞–¥–∞–Ω–æ
                return cls.execute_stopped(f'–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {args[0]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö')

        # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –ø–æ—à—É–∫ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –≤–¥–∞–≤—Å—è, —ñ –Ω–∞–¥–∞–Ω–æ by_str
        if by_str:
            words = by_str.split(" ", 1)  # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏: –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ —Ç–∞ —Ä–µ—à—Ç—É —Ä—è–¥–∫–∞
            if len(words) > 1:
                by_str = " ".join(words[1:])  # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ

            name = find_username(by_str)
            if name:
                user = repo_user.by_name(name)
                if user:
                    return await send_credit_image(user, msg.chat.id)
                else:
                    return cls.execute_stopped('—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∞–±–æ –Ω–µ—ñ—Å–Ω—É—é—á–µ —ñ–º\'—è')

        # –Ø–∫—â–æ –Ω–µ –Ω–∞–¥–∞–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ by_str –ø—É—Å—Ç–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—Ä–µ–¥–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if not args:
            return await send_credit_image(repo_user.by_tg(msg.from_user.id), msg.chat.id)

        # –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–º–æ–≤–∞, —è–∫—â–æ –∂–æ–¥–µ–Ω –∑ –≤–∏—â–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
        return cls.execute_stopped('–ü–æ–º–∏–ª–∫–∞ —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏')


class HighscoreCommand(BotCommand):
    description = "–ö—Ä–∞—â—ñ: –¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–π–≤–∏—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º."

    @classmethod
    def command_name(cls) -> str:
        return "best"

    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        try:
            limit = int(args[0])
        except:
            try:
                limit = int(find_number(by_str))
            except:
                limit = 5

        if limit > 9:
            return '–ù–µ –º–æ–∂–Ω–∞ –±—ñ–ª—å—à–µ 9-—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
            #return '–ù–µ –º–æ–∂–Ω–∞ –±—ñ–ª—å—à–µ 9-—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –±–æ —Ç–∏ –º—ñ–π —î–¥–∏–Ω–∏–π –∑–∞–π–º–∞—î—à —Ç–∞–º, –æ—Å—Ç–∞–Ω–Ω—î, 10 –º—ñ—Å—Ü–µ ‚ù§Ô∏è'
        elif limit < 1:
            return '–ù–µ –º–æ–∂–Ω–∞ –º–µ–Ω—à–µ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.'

        await send_highscore_image(msg.chat.id, limit=limit)
        return None
        #p_list = repo_user.with_highest_scores(10)
        #best_str = '\n'.join(f'{i + 1}. {p.name}: {p.score}' for i, p in enumerate(p_list))
        #return self.execute_finished(best_str)
    
class LowscoreCommand(BotCommand):
    description = "–ì—ñ—Ä—à—ñ: –¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–π–≥—ñ—Ä—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º."

    @classmethod
    def command_name(cls) -> str:
        return "lowscore"

    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        try:
            limit = int(args[0])
        except:
            try:
                limit = int(find_number(by_str))
            except:
                limit = 5

        if limit > 9:
            return '–ù–µ –º–æ–∂–Ω–∞ –±—ñ–ª—å—à–µ 9-—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.'
        elif limit < 1:
            return '–ù–µ –º–æ–∂–Ω–∞ –º–µ–Ω—à–µ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.'

        await send_lowscore_image(msg.chat.id, limit=limit)
        return None
    
class DateCommand(BotCommand):
    #description = "–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞."
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "date"

    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å
        now = datetime.now()
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ä—è–¥–æ–∫ –∑–∞ —à–∞–±–ª–æ–Ω–æ–º 'YYYY-MM-DD HH:MM:SS'
        date_str = f'–ó–∞—Ä–∞–∑ —á–∞—Å: {now.strftime('%Y-%m-%d %H:%M:%S')}'
        return self.execute_finished(date_str)
    
class HelpCommand(BotCommand):
    description = '–î–æ–ø–æ–º–æ–≥–∞ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏'

    @classmethod
    def command_name(cls) -> str:
        return 'help'
    
    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        commands = self.get_commands_description()

        if not repo_staff.get_by_id(msg.from_user.id):
            commands = [command for command in commands if not command.startswith("/give")]

        cmd_list_str = '\n'.join(commands)
        return f'''–Ø –º–æ–∂—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏, —è–∫—â–æ –∑–≤–µ—Ä–Ω–µ—à—Å—è —á–µ—Ä–µ–∑ —Å–ª–æ–≤–æ "—Å—É–¥" –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ—Å–∏ –Ω–∞ –º–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. 

–Ø –≤–º—ñ—é –≤:
{cmd_list_str}

–¢–∞–∫–æ–∂ —è –≤–º—ñ—é —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–º–∞–Ω–¥.'''
    
class AddAdminCommand(BotCommand):
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "new_admin"

    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        async def get_error() -> str:
            return '''—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: 
/new_admin @username —á–∏—Å–ª–æ_–ø—Ä–∞–≤(0 - –¥–ª—è —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞, 1 - –¥–ª—è –≥–æ–ª–æ–≤–∏) –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞_—â–æ–¥–µ–Ω–Ω–∞_–≤–∏–¥–∞—á–∞_–∫—Ä–µ–¥–∏—Ç—ñ–≤(—è–∫—â–æ —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä)
(–æ—Å–æ–±–∞ —Ç–∞–∫–æ–∂ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤ –ë–î –±–æ—Ç–∞)'''

        staff = repo_staff.get_by_id(msg.from_user.id)
        if staff and staff.admin:
            print(args)
            if args and len(args) >= 3:
                username = find_username(args[0])
                if not username:
                    return self.execute_stopped('—á–µ—Ä–µ–∑ –Ω–µ–≤—ñ—Ä–Ω–µ –∞–±–æ –Ω–µ—ñ—Å–Ω—É—é—á–µ —ñ–º\'—è')
                
                try:
                    perm = int(args[1])
                    if perm < 0 or perm > 1:
                        raise ValueError
                except:
                    return self.execute_stopped('—á–µ—Ä–µ–∑ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ –ø—Ä–∞–≤ (0 –∞–±–æ 1)')
                
                try:
                    change = int(args[2])
                    if change < 1 or change > 100000:
                        raise ValueError
                except:
                    return self.execute_stopped('—á–µ—Ä–µ–∑ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ —â–æ–¥–µ–Ω–Ω–æ—ó –≤–∏–¥–∞—á—ñ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–≤—ñ–¥ 1 –¥–æ 100000)')
                
                new_person = repo_user.by_name(username)

                if not new_person:
                    return self.execute_stopped(f'–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ –ë–î. –ù–µ—Ö–∞–π —â–æ—Å—å –Ω–∞–ø–∏—à–µ –º–µ–Ω—ñ')

                new_staff = StaffPerson(id=new_person.id, admin=perm, credits=change, max_credit=change)
                repo_staff.add(new_staff)

                if perm:
                    return f'–ì–æ–ª–æ–≤–∞ @{new_person.name} ({new_person.fullname}) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.'
                else:
                    return f'–Ü–Ω—Å–ø–µ–∫—Ç–æ—Ä @{new_person.name} ({new_person.fullname}) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.'
            else:
                return self.execute_stopped(await get_error())
        else:
            return None
        
class DeleteAdminCommand(BotCommand):
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "delete_admin"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None):
        staff_sender = repo_staff.get_by_id(msg.from_user.id)
        if not staff_sender:
            return
        async def get_error() -> str:
            return '''—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: 
/delete_admin @username (–∞–±–æ –∞–π–¥—ñ –æ—Å–æ–±–∏)'''

        if not args or len(args) != 1:
            return cls.execute_stopped(await get_error())

        identifier = args[0]
        if identifier.startswith('@'):
            user = repo_user.by_name(identifier[1:])  # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É '@' –∑ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if not user:
                return cls.execute_stopped('–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ë–î.')
            id_to_delete = user.id
        else:
            try:
                id_to_delete = int(identifier)
            except ValueError:
                return cls.execute_stopped('ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.')

        staff_member = repo_staff.get_by_id(id_to_delete)
        if staff_member:
            repo_staff.delete(id_to_delete)
            return f'–ì–æ–ª–æ–≤–∞/—ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä @{user.name} –∑ ID {id_to_delete} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.'
        else:
            return cls.execute_stopped('–ì–æ–ª–æ–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.')
        
class GetAdminListCommand(BotCommand):
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "admin_list"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None):
        staff_sender = repo_staff.get_by_id(msg.from_user.id)
        if staff_sender:
            member_list = []

            def staff_info(member: StaffPerson) -> str:
                if not member.admin:
                    return f'–º–æ–¥–µ—Ä ({member.credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑ {member.max_credits})'
                else:
                    return '–∞–¥–º—ñ–Ω'

            members = repo_staff.get_all()
            for member in members:
                person = repo_user.by_tg(member.id)

                member_list.append(f'{person.fullname} (@{person.name}) - {staff_info(member)}')
            
            return '\n'.join(member_list)
        return None
    
class DeleteUserCommand(BotCommand):
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "delete_user"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None):
        staff_sender = repo_staff.get_by_id(msg.from_user.id)
        if not staff_sender or not staff_sender.admin:
            return
        async def get_error() -> str:
            return '''—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: 
/delete_user @username (–∞–±–æ –∞–π–¥—ñ –æ—Å–æ–±–∏)'''

        if not args or len(args) != 1:
            return cls.execute_stopped(await get_error())

        identifier = args[0]
        if identifier.startswith('@'):
            user = repo_user.by_name(identifier[1:])  # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É '@' –∑ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if not user:
                return cls.execute_stopped('–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ë–î.')
            id_to_delete = user.id
        else:
            try:
                id_to_delete = int(identifier)
            except ValueError:
                return cls.execute_stopped('ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.')

        ex_member = repo_user.by_tg(id_to_delete)
        if ex_member:
            repo_user.delete(id_to_delete)
            return f'–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.name} –∑ ID {id_to_delete} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.'
        else:
            return cls.execute_stopped('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
    
# client commands
help_command = HelpCommand()
check_credit_command = MyCreditCommand()
highscore_command = HighscoreCommand()
lowscore_command = LowscoreCommand()
#date_command = DateCommand()

# mod command
change_credit_command = SetCreditCommand()

# admin commands
add_admin_command = AddAdminCommand()
delete_admin_command = DeleteAdminCommand()
admin_list_command = GetAdminListCommand()
delete_user_command = DeleteUserCommand()

BotCommand.get_commands_description()