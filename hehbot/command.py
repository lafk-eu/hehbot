from hehbot.client import repo_user, Person, CooldownType, Cooldown
from hehbot.admin import repo_staff, StaffPerson

from hehbot.base_command import BotCommand
from datetime import datetime

from hehbot.decoration.credit_image import send_credit_image, send_highscore_image, send_lowscore_image, send_changed_credit_image
from mbot import bot, dp

import aiogram, asyncio
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from aiogram.utils.markdown import hbold
from aiogram.utils.keyboard import InlineKeyboardBuilder

import re

def safe_telegram_request(retry_seconds=5.0):
    def decorator(func):
        async def wrapper(*args, **kwargs):
            while True:
                try:
                    return await func(*args, **kwargs)
                except TelegramRetryAfter as e:
                    print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ —á–∞—Å—Ç–æ—Ç–æ—é –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ Telegram, —á–µ–∫–∞—î–º–æ {e.retry_after} —Å–µ–∫—É–Ω–¥–∏.")
                    await asyncio.sleep(e.retry_after)
                except TelegramAPIError as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {e}")
                    break  # or raise e to propagate the error after logging
        return wrapper
    return decorator

def find_username(text: str) -> str | None:
    # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —ñ–º'—è, —è–∫–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "@" –∞–±–æ "$"
    special_match = re.search(r'\b[@$][a-zA-Z_][a-zA-Z0-9_]*\b', text)
    if special_match:
        return special_match.group(0)

    # –Ø–∫—â–æ —Ç–∞–∫–µ —ñ–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ —ñ–º'—è –∑–∞ —ñ—Å–Ω—É—é—á–∏–º –ø–∞—Ç–µ—Ä–Ω–æ–º
    match = re.search(r'\b[a-zA-Z_][a-zA-Z0-9_]*\b', text)
    return match.group(0) if match else None

def find_number(text: str) -> int:
    match = re.search(r'(?<!\w)[+-]?\d+', text)
    return int(match.group(0)) if match else None

def remove_english_words(text: str) -> str:
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤.
    # –°–ª–æ–≤–æ –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è —ñ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –ª—ñ—Ç–µ—Ä–æ—é –∞–±–æ —Å–∏–º–≤–æ–ª–æ–º "_",
    # —ñ –º—ñ—Å—Ç–∏—Ç–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ "_".
    pattern = r'\b[a-zA-Z_]+\b'
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ re.sub() –¥–ª—è –∑–∞–º—ñ–Ω–∏ –≤—Å—ñ—Ö –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –Ω–∞ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫.
    result = re.sub(pattern, '', text)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤.
    return result

class SetCreditCommand(BotCommand):
    description = "+300 —Ä–µ–π—Ç–∏–Ω–≥—É (–≤–∏–¥–∞—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∏)"
    info = "–í–∏–¥–∞—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∏; –ø–æ—Ç—Ä—ñ–±–Ω—ñ –Ω—ñ–∫ —Ç–∞ —á–∏—Å–ª–æ."

    @classmethod
    def command_name(cls) -> str:
        return "give"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None) -> str:
        MAX_INT_VALUE = 9223372036854775807
        MIN_INT_VALUE = -9223372036854775808
        
        staff = repo_staff.get_by_id(msg.from_user.id)
        amount = None

        if not staff:
            return cls.execute_stopped(f'—á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤')
        
        if by_str:
            username = find_username(by_str)
            amount = find_number(by_str)
        else:
            return cls.execute_stopped('–Ω–µ –≤–∫–∞–∑–∞–Ω–æ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—É–º—É')

        target = repo_user.by_name(username)
        if not target:
            target_msg = msg.reply_to_message
        
            if target_msg:
                target = await repo_user.by_tg_message(target_msg)
                
                if not target:
                    return cls.execute_stopped(f'–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è {target_msg.from_user.full_name if target_msg.from_user else "(–ù–µ –º–æ–∂—É –≤–∏–º–æ–≤–∏—Ç–∏ —ñ–º'—è)"} –≤ –º–æ—é –±–∞–∑—É –¥–∞–Ω–∏—Ö.')
            else:
                return cls.execute_stopped(f'–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö: –º–æ–∂–µ—à –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ–± –¥–æ–¥–∞—Ç–∏.')

        if amount:
            print('—á–∏—Å–ª–æ: ', amount)
            print('—Ä—è–¥–æ–∫: ', by_str)
            new_score = target.score + amount

            if new_score > MAX_INT_VALUE:
                new_score = MAX_INT_VALUE
            elif new_score < MIN_INT_VALUE:
                new_score = MIN_INT_VALUE
            
        else:
            return cls.execute_stopped(f'—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ –∫—Ä–µ–¥–∏—Ç—ñ–≤')
        
        if not staff.admin:
            if staff.credits <= 0:
                return f'–ù–∞—Å—å–æ–≥–æ–¥–Ω—ñ —Ç–≤–æ—è –æ—Å–æ–±–∏—Å—Ç–∞ —Ä–æ–∑–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–∞ üò¢'
            if staff.credits < amount:
                return f'–°—å–æ–≥–æ–¥–Ω—ñ —Ç–æ–±—ñ –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏ –∫—Ä–µ–¥–∏—Ç—ñ–≤ –Ω–∞: {staff.credits}. –ó–º–µ–Ω—à –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞—á—ñ.'

            staff.credits -= abs(amount)
            repo_staff.update(staff)

            if repo_staff.get_by_id(target.id):
                return f'–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–≤–∞—Ç–∏ —Å–æ—à—ñ–∞–ª –∫—Ä–µ–¥–∏—Ç–∏ —ñ–Ω—à–∏–º —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞–º —Å–æ—à—ñ–∞–ª –∫—Ä–µ–¥–∏—Ç—É! üò°üò°üò°'

        await send_changed_credit_image(repo_user.by_tg(target.id), amount, msg)
        await repo_user.update_person(id=target.id, score=new_score)

        return None


class MyCreditCommand(BotCommand):
    description = "–ü–æ–∫–∞–∂–∏/–°–∫—ñ–ª—å–∫–∏ —è–∫–∏–π –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç—ñ–≤"
    info = "–ë–∞–ª–∞–Ω—Å; –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —á—É–∂–∏–π."

    @classmethod
    def command_name(cls) -> str:
        return "credit"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Å–ø–æ—á–∞—Ç–∫—É
        if args:
            user = repo_user.by_name(find_username(args[0]))
            if user:
                return await send_credit_image(user, msg)
            elif not by_str:  # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —ñ by_str –Ω–µ –Ω–∞–¥–∞–Ω–æ
                return cls.execute_stopped(f'–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {args[0]} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö')

        # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –ø–æ—à—É–∫ –∑–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –≤–¥–∞–≤—Å—è, —ñ –Ω–∞–¥–∞–Ω–æ by_str
        if by_str:
            words = by_str.split(" ", 1)  # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏: –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ —Ç–∞ —Ä–µ—à—Ç—É —Ä—è–¥–∫–∞
            if len(words) > 1:
                by_str = " ".join(words[1:])  # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ

            name = find_username(by_str)
            if name:
                target = repo_user.by_name(name)
                if target:
                    return await send_credit_image(target, msg)
                
                else:
                    target_msg = msg.reply_to_message
        
                    if target_msg:
                        target = await repo_user.by_tg_message(target_msg)
                
                        if not target:
                            return cls.execute_stopped(f'–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è {target_msg.from_user.full_name if target_msg.from_user else "(–ù–µ –º–æ–∂—É –≤–∏–º–æ–≤–∏—Ç–∏ —ñ–º'—è)"} –≤ –º–æ—é –±–∞–∑—É –¥–∞–Ω–∏—Ö.')
                        return await send_credit_image(target, msg)
                    else:
                        return cls.execute_stopped(f'{name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: –º–æ–∂–µ—à –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ–± –¥–æ–¥–∞—Ç–∏.')

        # –Ø–∫—â–æ –Ω–µ –Ω–∞–¥–∞–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ by_str –ø—É—Å—Ç–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—Ä–µ–¥–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if not args:
            return await send_credit_image(repo_user.by_tg(msg.from_user.id), msg)

        # –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–º–æ–≤–∞, —è–∫—â–æ –∂–æ–¥–µ–Ω –∑ –≤–∏—â–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
        return cls.execute_stopped(f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {name if name else ''} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')


class HighscoreCommand(BotCommand):
    description = "–ö—Ä–∞—â—ñ: –¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–π–≤–∏—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º."
    info = "–ö—Ä–∞—â—ñ: –Ω–∏–º–∏ –ø–∏—à–∞—î—Ç—å—Å—è –ø–∞—Ä—Ç—ñ—è."

    @classmethod
    def command_name(cls) -> str:
        return "best"

    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        try:
            limit = int(args[0])
        except:
            try:
                limit = int(find_number(by_str))
            except:
                limit = 5

        if limit > 9:
            return '–ù–µ –º–æ–∂–Ω–∞ –±—ñ–ª—å—à–µ 9-—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
            #return '–ù–µ –º–æ–∂–Ω–∞ –±—ñ–ª—å—à–µ 9-—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –±–æ —Ç–∏ –º—ñ–π —î–¥–∏–Ω–∏–π –∑–∞–π–º–∞—î—à —Ç–∞–º, –æ—Å—Ç–∞–Ω–Ω—î, 10 –º—ñ—Å—Ü–µ ‚ù§Ô∏è'
        elif limit < 1:
            return '–ù–µ –º–æ–∂–Ω–∞ –º–µ–Ω—à–µ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.'

        await send_highscore_image(msg, limit=limit)
        return None
        #p_list = repo_user.with_highest_scores(10)
        #best_str = '\n'.join(f'{i + 1}. {p.name}: {p.score}' for i, p in enumerate(p_list))
        #return self.execute_finished(best_str)
    
class LowscoreCommand(BotCommand):
    description = "–ì—ñ—Ä—à—ñ: –¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–π–≥—ñ—Ä—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º."
    info = "–ì—ñ—Ä—à—ñ: –ø–µ—Ä–µ—à–∫–æ–¥–∏ –ø–∞—Ä—Ç—ñ—ó."

    @classmethod
    def command_name(cls) -> str:
        return "lowscore"

    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        try:
            limit = int(args[0])
        except:
            try:
                limit = int(find_number(by_str))
            except:
                limit = 5

        if limit > 9:
            return '–ù–µ –º–æ–∂–Ω–∞ –±—ñ–ª—å—à–µ 9-—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.'
        elif limit < 1:
            return '–ù–µ –º–æ–∂–Ω–∞ –º–µ–Ω—à–µ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.'

        await send_lowscore_image(msg, limit=limit)
        return None
    
class IdiNakhuyCommand(BotCommand):
    description = "—ñ–¥—ñ –Ω–∞—Ö—É–π"
    ignore = True
    min_similarity = 0.70

    @classmethod
    def command_name(cls) -> str:
        return "idi_nakhuy"

    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        person = repo_user.by_tg(msg.from_user.id)
        cooldown = Cooldown(person)

        if await cooldown.get_usage_count(CooldownType.IDI):
            await msg.reply('–°–∞–º —ñ–¥—ñ')
            return
        
        await cooldown.update_cooldown(CooldownType.IDI, 1)
        
        score_change = 300 if person.score < 0 else -300

        await send_changed_credit_image(person, score_change, msg, caption='–°–∞–º —ñ–¥—ñ')
        await repo_user.update_person(person.id, score=person.score+score_change)
        await repo_user.update_cooldown(person.id, cooldown)

    
class DateCommand(BotCommand):
    #description = "–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞."
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "date"

    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å
        now = datetime.now()
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ä—è–¥–æ–∫ –∑–∞ —à–∞–±–ª–æ–Ω–æ–º 'YYYY-MM-DD HH:MM:SS'
        date_str = f'–ó–∞—Ä–∞–∑ —á–∞—Å: {now.strftime('%Y-%m-%d %H:%M:%S')}'
        return self.execute_finished(date_str)
    
class HelpCommand(BotCommand):
    description = '–î–æ–ø–æ–º–æ–≥–∞ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏'
    info = "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."

    @classmethod
    def command_name(cls) -> str:
        return 'help'
    
    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        commands = self.get_commands_info()

        if not repo_staff.get_by_id(msg.from_user.id):
            commands = [command for command in commands if not command.startswith("/give")]

        cmd_list_str = '\n'.join(commands)
        return f'''
–î–ª—è –∫–æ–º–∞–Ω–¥, –¥–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –Ω—ñ–∫, –º–æ–∂–Ω–∞ –æ–±—ñ–π—Ç–∏—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ —á—É–∂–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

{cmd_list_str}

–ú–æ–∂—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –≤ —Ç–µ–∫—Å—Ç—ñ, —è–∫—â–æ –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ "—Å—É–¥".'''
    
class AddAdminCommand(BotCommand):
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "new_admin"

    @classmethod
    async def execute(self, msg: aiogram.types.Message, args, by_str: str = None):
        async def get_error() -> str:
            return '''—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: 
/new_admin @username —á–∏—Å–ª–æ_–ø—Ä–∞–≤(0 - –¥–ª—è —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞, 1 - –¥–ª—è –≥–æ–ª–æ–≤–∏) –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞_—â–æ–¥–µ–Ω–Ω–∞_–≤–∏–¥–∞—á–∞_–∫—Ä–µ–¥–∏—Ç—ñ–≤(—è–∫—â–æ —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä)
(–æ—Å–æ–±–∞ —Ç–∞–∫–æ–∂ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤ –ë–î –±–æ—Ç–∞)'''

        staff = repo_staff.get_by_id(msg.from_user.id)
        if staff and staff.admin:
            print(args)
            if args and len(args) >= 3:
                username = find_username(args[0])
                if not username:
                    return self.execute_stopped('—á–µ—Ä–µ–∑ –Ω–µ–≤—ñ—Ä–Ω–µ –∞–±–æ –Ω–µ—ñ—Å–Ω—É—é—á–µ —ñ–º\'—è')
                
                try:
                    perm = int(args[1])
                    if perm < 0 or perm > 1:
                        raise ValueError
                except:
                    return self.execute_stopped('—á–µ—Ä–µ–∑ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ –ø—Ä–∞–≤ (0 –∞–±–æ 1)')
                
                try:
                    change = int(args[2])
                    if change < 1 or change > 100000:
                        raise ValueError
                except:
                    return self.execute_stopped('—á–µ—Ä–µ–∑ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ —â–æ–¥–µ–Ω–Ω–æ—ó –≤–∏–¥–∞—á—ñ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–≤—ñ–¥ 1 –¥–æ 100000)')
                
                new_person = repo_user.by_name(username)

                if not new_person:
                    return self.execute_stopped(f'–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ –ë–î. –ù–µ—Ö–∞–π —â–æ—Å—å –Ω–∞–ø–∏—à–µ –º–µ–Ω—ñ')

                new_staff = StaffPerson(id=new_person.id, admin=perm, credits=change, max_credit=change)
                repo_staff.add(new_staff)

                if perm:
                    return f'–ì–æ–ª–æ–≤–∞ @{new_person.name} ({new_person.fullname}) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.'
                else:
                    return f'–Ü–Ω—Å–ø–µ–∫—Ç–æ—Ä @{new_person.name} ({new_person.fullname}) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.'
            else:
                return self.execute_stopped(await get_error())
        else:
            return None
        
class DeleteAdminCommand(BotCommand):
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "delete_admin"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None):
        staff_sender = repo_staff.get_by_id(msg.from_user.id)
        if not staff_sender:
            return
        async def get_error() -> str:
            return '''—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: 
/delete_admin @username (–∞–±–æ –∞–π–¥—ñ –æ—Å–æ–±–∏)'''

        if not args or len(args) != 1:
            return cls.execute_stopped(await get_error())

        identifier = args[0]
        if identifier.startswith('@'):
            user = repo_user.by_name(identifier[1:])  # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É '@' –∑ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if not user:
                return cls.execute_stopped('–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ë–î.')
            id_to_delete = user.id
        else:
            try:
                id_to_delete = int(identifier)
            except ValueError:
                return cls.execute_stopped('ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.')

        staff_member = repo_staff.get_by_id(id_to_delete)
        if staff_member:
            repo_staff.delete(id_to_delete)
            return f'–ì–æ–ª–æ–≤–∞/—ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä @{user.name} –∑ ID {id_to_delete} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.'
        else:
            return cls.execute_stopped('–ì–æ–ª–æ–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.')
        
class GetAdminListCommand(BotCommand):
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "admin_list"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None):
        staff_sender = repo_staff.get_by_id(msg.from_user.id)
        if staff_sender:
            member_list = []

            def staff_info(member: StaffPerson) -> str:
                if not member.admin:
                    return f'—ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä ({member.credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑ {member.max_credits})'
                else:
                    return '–≥–æ–ª–æ–≤–∞'

            members = repo_staff.get_all()
            for member in members:
                person = repo_user.by_tg(member.id)

                member_list.append(f'{person.fullname} (@{person.name}) - {staff_info(member)}')
            
            return '\n'.join(member_list)
        return None
    
class DeleteUserCommand(BotCommand):
    ignore = True

    @classmethod
    def command_name(cls) -> str:
        return "delete_user"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None):
        staff_sender = repo_staff.get_by_id(msg.from_user.id)
        if not staff_sender or not staff_sender.admin:
            return
        async def get_error() -> str:
            return '''—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: 
/delete_user @username (–∞–±–æ –∞–π–¥—ñ –æ—Å–æ–±–∏)'''

        if not args or len(args) != 1:
            return cls.execute_stopped(await get_error())

        identifier = args[0]
        if identifier.startswith('@'):
            user = repo_user.by_name(identifier[1:])  # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É '@' –∑ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if not user:
                return cls.execute_stopped('–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ë–î.')
            id_to_delete = user.id
        else:
            try:
                id_to_delete = int(identifier)
            except ValueError:
                return cls.execute_stopped('ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.')

        ex_member = repo_user.by_tg(id_to_delete)
        if ex_member:
            repo_user.delete(id_to_delete)
            return f'–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.name} –∑ ID {id_to_delete} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.'
        else:
            return cls.execute_stopped('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.')
        









class MakebetCommand(BotCommand):
    description = "–ó—ñ–≥—Ä–∞—Ç–∏ —Å—Ç–∞–≤–∫—É / —É–∫–ª–∞—Å—Ç–∏ –ø–∞—Ä—ñ"
    info = '''–ó—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫—É (—É–∫–ª–∞—Å—Ç–∏ –ø–∞—Ä—ñ) —ñ –∑—ñ–≥—Ä–∞—Ç–∏.
–Ø–∫—â–æ –±–µ–∑ –Ω—ñ–∫—É, —Ç–æ –±—É–¥—å-—Ö—Ç–æ –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏.
–ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞ ‚Äî 300 –∫—Ä–µ–¥–∏—Ç—ñ–≤. –Ø–∫—â–æ —É—á–∞—Å–Ω–∏–∫–∏ –º–∞—é—Ç—å –±—ñ–ª—å—à–µ, –ª—ñ–º—ñ—Ç –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è.'''

    @classmethod
    def command_name(cls) -> str:
        return "bet"

    @classmethod
    async def execute(cls, msg: aiogram.types.Message, args, by_str: str = None):
        person = repo_user.by_tg(msg.from_user.id)
        if not person:
            return cls.execute_stopped('–Ø —Ç–µ–±–µ –Ω–µ –∑–Ω–∞—é')
        
        target = None
        target_username = find_username(by_str)
        amount = find_number(by_str)

        if target_username:
            target = repo_user.by_name(target_username)
        if not target:
            target_msg = msg.reply_to_message
        
            if target_msg:
                target = await repo_user.by_tg_message(target_msg)
            
                if not target:
                    return cls.execute_stopped(f'—â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è {target_msg.from_user.full_name if target_msg.from_user else "(–ù–µ –º–æ–∂—É –≤–∏–º–æ–≤–∏—Ç–∏ —ñ–º'—è)"} –≤ –º–æ—é –±–∞–∑—É –¥–∞–Ω–∏—Ö')

        if not amount:
            return cls.execute_stopped(f'—á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ –∫—Ä–µ–¥–∏—Ç—ñ–≤')

        if amount < 10:
            return f'–î–∞–≤–∞–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≥—Ä–∞—Ç–∏: —è–∫—ñ —â–µ {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤? –Ø –ø—Ä–∏–π–º–∞—é –ª–∏—à–µ 10 —ñ –±—ñ–ª—å—à–µ'
        
        if amount > 300:
            if person.score < amount:
                return f'–ù—î, —Ç–∞–∫ –¥—ñ–ª–æ –Ω–µ –ø—ñ–¥–µ. 300 –∫—Ä–µ–¥–∏—Ç—ñ–≤ –Ω–∞ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É. –Ø–∫–±–∏ –≤ —Ç–µ–±–µ –±—É–ª–æ –±—ñ–ª—å—à–µ –Ω—ñ–∂ {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤, —Ç–æ —Ç–æ–¥—ñ —Ç–∞–∫.'
            elif target and target.score < amount:
                return f'–ë–∞—á—É –≤ —Ç–≤–æ–≥–æ –¥—Ä—É–∂–∫–∞ –º–µ–Ω—à–µ {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤. –ì—Ä–∞ –ø—ñ–¥–µ, —è–∫—â–æ 300 –∫—Ä–µ–¥–∏—Ç—ñ–≤ –Ω–∞ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É.'
            

        cd = Cooldown(person)
        bet_count = await cd.get_usage_count(CooldownType.BET)

        if bet_count >= 3:
            return f'–°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –Ω–µ –º–æ–∂–µ—à —É–∫–ª–∞–¥–∞—Ç–∏ –ø–∞—Ä—ñ, –ª–∏—à–µ –ø—Ä–∏–π–º–∞—Ç–∏.'
        
        bet_count += 1
        await cd.update_cooldown(CooldownType.BET, bet_count)
        await repo_user.update_cooldown(person.id, cd)
        
        if target:
            # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó –≥—Ä–∏
            bet_message = await msg.answer(f"{hbold(f'{person.fullname} —É–∫–ª–∞–¥–∞—î –ø–∞—Ä—ñ –Ω–∞ {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤')}\n—ñ –∑–∞–ø—Ä–æ—à—É—î {target.fullname} (@{target.name})", parse_mode='html')
            
            keyboard = InlineKeyboardBuilder()

            keyboard.button(text="–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏",
                callback_data=f"ignore:{person.id}:{target.id}:{msg.chat.id}:{bet_message.message_id}"),
            
            keyboard.button(text="–ü—Ä–∏–π–Ω—è—Ç–∏",
                callback_data=f"accept:{amount}:{person.id}:{target.id}:{msg.chat.id}:{bet_message.message_id}")

            await bet_message.edit_text(f"{hbold(f'{person.fullname} —É–∫–ª–∞–¥–∞—î –ø–∞—Ä—ñ –Ω–∞ {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤')}\n—ñ –∑–∞–ø—Ä–æ—à—É—î {target.fullname} (@{target.name})", 
                reply_markup=keyboard.as_markup(), 
                parse_mode='html')
            
            # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–π–º–µ—Ä–æ–º
            async def update_message():
                for remaining in range(60, -1, -5):  # —Ö–≤–∏–ª–∏–Ω–∞ –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
                    if remaining % 15 == 0:  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ API
                        try:
                            await bet_message.edit_text(
                                f"{hbold(f'{person.fullname} —É–∫–ª–∞–¥–∞—î –ø–∞—Ä—ñ –Ω–∞ {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤')}\n—ñ –∑–∞–ø—Ä–æ—à—É—î {target.fullname} (@{target.name})\n–ó–∞–ª–∏—à–∏–ª–æ—Å—è: {remaining} —Å–µ–∫—É–Ω–¥", 
                                reply_markup=keyboard.as_markup(), 
                                parse_mode='html')
                        except:
                            return                
                    await asyncio.sleep(5)
                await msg.delete()
                try:
                    await bet_message.delete()  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

                    await cd.update_cooldown(CooldownType.BET, bet_count-1)
                    await repo_user.update_cooldown(person.id, cd)
                except:
                    pass   # it's okay
            
            # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–π–º–µ—Ä–æ–º
            asyncio.create_task(update_message())

        else:
            disclaimer_text = f'–ú–æ–∂—É—Ç—å –ø—Ä–∏–π–º–∞—Ç–∏ —Ç—ñ, –≤ –∫–æ–≥–æ —î {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤.\n' if amount > 300 else ''

            # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø—É–±–ª—ñ—á–Ω–æ—ó –≥—Ä–∏
            bet_message = await msg.answer(f"{hbold(f'{person.fullname} —É–∫–ª–∞–¥–∞—î –ø–∞—Ä—ñ –Ω–∞ {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤')}\n–ß–∏ —Ö—Ç–æ—Å—å —Ö–æ—á–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫?{disclaimer_text}", parse_mode='html')
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫", 
                callback_data=f"accept:{amount}:{person.id}:0:{msg.chat.id}:{bet_message.message_id}")

            await bet_message.edit_text(f"{hbold(f'{person.fullname} —É–∫–ª–∞–¥–∞—î –ø–∞—Ä—ñ –Ω–∞ {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤')}\n–ß–∏ —Ö—Ç–æ—Å—å —Ö–æ—á–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫?{disclaimer_text}", 
                reply_markup=keyboard.as_markup(), 
                parse_mode='html')
            
            # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–π–º–µ—Ä–æ–º
            async def update_message():
                for remaining in range(60, -1, -5):  # —Ö–≤–∏–ª–∏–Ω–∞ –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
                    if remaining % 15 == 0:  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ API
                        try:
                            await bet_message.edit_text(
                                f"{hbold(f'{person.fullname} —É–∫–ª–∞–¥–∞—î –ø–∞—Ä—ñ –Ω–∞ {amount} –∫—Ä–µ–¥–∏—Ç—ñ–≤')}\n–ß–∏ —Ö—Ç–æ—Å—å —Ö–æ—á–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫?\n{disclaimer_text}–ó–∞–ª–∏—à–∏–ª–æ—Å—è: {remaining} —Å–µ–∫—É–Ω–¥", 
                                reply_markup=keyboard.as_markup(), 
                                parse_mode='html')
                        except:
                            return                
                    await asyncio.sleep(5)
                await msg.delete()
                try:
                    await bet_message.delete()  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

                    await cd.update_cooldown(CooldownType.BET, bet_count-1)
                    await repo_user.update_cooldown(person.id, cd)
                except:
                    pass   # it's okay
            
            # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–π–º–µ—Ä–æ–º
            asyncio.create_task(update_message())
        return None
    
async def safe_send_dice(chat_id: int, emoji: str):
    try:
        msg = await bot.send_dice(chat_id, emoji=emoji)
        return msg
    except TelegramRetryAfter as e:
        print(f"–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ –ª—ñ–º—ñ—Ç, —á–µ–∫–∞—î–º–æ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)  # –ß–µ–∫–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —á–∞—Å
        await safe_send_dice(chat_id)  # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ —Ä–∞–∑ –ø—ñ—Å–ª—è –ø–∞—É–∑–∏
    except TelegramAPIError as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ Telegram API: {e}")

async def safe_send_text(chat_id: int, text: str, parse_mode = None):
    try:
        msg = await bot.send_message(chat_id, text=text)
        return msg
    except TelegramRetryAfter as e:
        print(f"–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ –ª—ñ–º—ñ—Ç, —á–µ–∫–∞—î–º–æ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)  # –ß–µ–∫–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —á–∞—Å
        await safe_send_dice(chat_id)  # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ —Ä–∞–∑ –ø—ñ—Å–ª—è –ø–∞—É–∑–∏
    except TelegramAPIError as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ Telegram API: {e}")

async def safe_answer_callback_query(callback_query_id):
    try:
        callback = await bot.answer_callback_query(callback_query_id)
        return callback
    except TelegramRetryAfter as e:
        print(f"–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ –ª—ñ–º—ñ—Ç, —á–µ–∫–∞—î–º–æ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)  # –ß–µ–∫–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —á–∞—Å
        await safe_answer_callback_query(callback_query_id)  # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ —Ä–∞–∑ –ø—ñ—Å–ª—è –ø–∞—É–∑–∏
    except TelegramAPIError as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ Telegram API: {e}")

@dp.callback_query(lambda c: c.data and c.data.startswith('accept'))
async def handle_accept(callback_query: aiogram.types.CallbackQuery):
    await safe_answer_callback_query(callback_query.id)

    print(callback_query.data.split(':'))
    _, amount, user_id, target_id, chat_id, bet_message_id = callback_query.data.split(':')
    amount, user_id, target_id, chat_id, bet_message_id = int(amount), int(user_id), int(target_id), int(chat_id), int(bet_message_id)
    
    if target_id == 0:
        pass
    elif not target_id == callback_query.from_user.id:
        return None
    
    target = repo_user.by_tg(callback_query.from_user.id)
    if target:
        if target.id == user_id:
            return None
    else:
        t = callback_query.from_user
        target = Person(t.id, t.full_name, name=t.username)
        repo_user.add(target)
    
    if amount > 300 and target.score < amount:
        return None
    
    person = repo_user.by_tg(user_id)

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞–≤–∫–∏, –ø–æ–≤—ñ–¥–æ–º–ª—è—é—á–∏, —â–æ —Å—Ç–∞–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ
    await bot.delete_message(chat_id=chat_id, message_id=bet_message_id)

    await safe_send_text(chat_id=chat_id, text=f"–°—Ç–∞–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {target.fullname} (@{target.name}).", parse_mode='HTML')
    
    # –¢—É—Ç –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Å—Ç–∞–≤–∫–∏...
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫—É–±–∏–∫—ñ–≤
    await asyncio.sleep(2)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –¥—Ä—É–≥–æ–≥–æ –∫—É–±–∏–∫–∞
    msg1 = await safe_send_dice(chat_id, emoji="üé≤")
    await asyncio.sleep(2)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –¥—Ä—É–≥–æ–≥–æ –∫—É–±–∏–∫–∞
    msg2 = await safe_send_dice(chat_id, emoji="üé≤")
    await asyncio.sleep(2)
        
    #await cd.update_cooldown(CooldownType.BET, bet_count+1)

    target_credits = 0
    person_credits = 0

    #await repo_user.update_cooldown(cd)
    if msg1.dice.value > msg2.dice.value:
        person_credits = amount
        target_credits = -amount

    elif msg1.dice.value < msg2.dice.value:
        person_credits = -amount
        target_credits = amount
    else:
        n = msg1.dice.value
        if n == 1:
            person_credits = -100
            target_credits = -100
        if n == 6:
            person_credits = +100
            target_credits = +100
        else:
            await safe_send_text(chat_id=chat_id, text='–ù—ñ—Ö—Ç–æ –Ω–µ –ø–µ—Ä–µ–º—ñ–≥: –∫—Ä–µ–¥–∏—Ç–∏ –Ω–µ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω—ñ.')
            return None

    async def give(person: Person, credits: int):
        await repo_user.update_person(person.id, score=person.score+credits)
        
    await give(person, person_credits)
    await give(target, target_credits)

    await safe_send_text(chat_id=chat_id, text=f'''
–†–µ–∑—É–ª—å—Ç–∞—Ç:
{person.fullname} –º–∞—î {person.score} —ñ –æ—Ç—Ä–∏–º—É—î {person_credits}
{target.fullname} –º–∞—î {target.score} —ñ –æ—Ç—Ä–∏–º—É—î {target_credits}''', parse_mode='html')

@dp.callback_query(lambda c: c.data and c.data.startswith('ignore'))
async def handle_ignore(callback_query: aiogram.types.CallbackQuery):
    await safe_answer_callback_query(callback_query.id)
    _, user_id, target_id, chat_id, bet_message_id = callback_query.data.split(':')
    user_id, target_id, chat_id, bet_message_id = int(user_id), int(target_id), int(chat_id), int(bet_message_id)

    if target_id == 0 or not callback_query.from_user.id == target_id:
        return None
    
    try:
        await safe_send_text(chat_id, text=f"–°—Ç–∞–≤–∫—É –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.", parse_mode='HTML')
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞–≤–∫–∏, –ø–æ–≤—ñ–¥–æ–º–ª—è—é—á–∏, —â–æ —Å—Ç–∞–≤–∫—É —ñ–≥–Ω–æ—Ä—É—é—Ç—å
        await bot.delete_message(chat_id=chat_id, message_id=bet_message_id)

    except TelegramRetryAfter as e:
        print(f"–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ –ª—ñ–º—ñ—Ç, —á–µ–∫–∞—î–º–æ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)  # –ß–µ–∫–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —á–∞—Å
        await bot.edit_message_text(chat_id=chat_id, message_id=bet_message_id,
            text=f"–°—Ç–∞–≤–∫—É –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.", parse_mode='HTML')

        

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
    
# client commands
help_command = HelpCommand()
check_credit_command = MyCreditCommand()
highscore_command = HighscoreCommand()
lowscore_command = LowscoreCommand()
makebet_command = MakebetCommand()
idi_nakhuy_command = IdiNakhuyCommand()
#date_command = DateCommand()

# mod command
change_credit_command = SetCreditCommand()

# admin commands
add_admin_command = AddAdminCommand()
delete_admin_command = DeleteAdminCommand()
admin_list_command = GetAdminListCommand()
delete_user_command = DeleteUserCommand()

BotCommand.get_commands_description()